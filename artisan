#!/usr/bin/env php
<?php
declare(strict_types=1);

use Eyika\Atom\Framework\Support\Facade\Facade;

date_default_timezone_set('UTC');
define('ATOM_START', microtime(true));

$log_path = __DIR__."/../storage/logs/php_error.log";
ini_set('error_log', $log_path);

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any our classes "manually". Feels great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';
require_once __DIR__."/vendor/eyika/atom-framework/src/helpers.php";

$app = require_once __DIR__.'/bootstrap/app.php';
/** @var Eyika\Atom\Framework\Foundation\Application $app */

Facade::setFacadeApplication($app);

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Eyika\Atom\Framework\Foundation\Contracts\ConsoleKernel::class);

/** @var Eyika\Atom\Framework\Foundation\Contracts\ConsoleKernel $kernel */

// $status = $kernel->run(
//     $input = new Symfony\Component\Console\Input\ArgvInput,  ///TODO: this should be the right way instead of the method used below
//     new Symfony\Component\Console\Output\ConsoleOutput       ///TODO: we should implement this so as to leverage symphony's powerful command line features
// );

$arg_v = $argv;

array_shift($arg_v);
$command = array_shift($arg_v) ?? 'random-quote';
$inputs = $arg_v ?? [];

$kernel->run($command, $inputs);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$status = $kernel->terminate($inputs);

exit($status);
